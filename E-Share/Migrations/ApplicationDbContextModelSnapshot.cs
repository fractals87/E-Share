// <auto-generated />
using System;
using E_Share.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_Share.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("E_Share.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "3f24398b-2651-449f-a9cb-5e3085746795",
                            ConcurrencyStamp = "c30e81ef-fb83-42ea-b793-ce9d31b13999",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "19d7d7b6-10f3-455c-8f40-010bf5970143",
                            ConcurrencyStamp = "abc5370d-5a74-4496-bd60-0efb4ebdd201",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("E_Share.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("E_Share.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<double>("Credit");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "4585db44-9cde-45fb-8777-4df85f8ca7b6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65e4c76c-d8e9-41a0-a3d1-9a3ad1359fde",
                            Credit = 100.0,
                            DateOfBirth = new DateTime(2020, 1, 13, 23, 1, 59, 649, DateTimeKind.Local).AddTicks(2434),
                            Email = "admin@test.it",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "ADMIN@TEST.IT",
                            NormalizedUserName = "ADMIN@TEST.IT",
                            PasswordHash = "AQAAAAEAACcQAAAAEEcZps9iPvMzEqYyE0QHSBEdGVxJpSRToYehtZrPi4ov5CJ2xG8yd7GqaAtuA/go5g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "test",
                            TwoFactorEnabled = false,
                            UserName = "admin@test.it"
                        },
                        new
                        {
                            Id = "445f85b8c-71fb-43f8-b025-080888bee57d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ab9f454-c0e4-4792-b0f7-dfbc6ebdfad5",
                            Credit = 100.0,
                            DateOfBirth = new DateTime(2020, 1, 13, 23, 1, 59, 659, DateTimeKind.Local).AddTicks(3232),
                            Email = "user@test.it",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "user",
                            NormalizedEmail = "USER@TEST.IT",
                            NormalizedUserName = "USER@TEST.IT",
                            PasswordHash = "AQAAAAEAACcQAAAAENQ6F15PQQD7spqeRADZR2i6LoSixSg07AIJ5arlcwFPyQf2SHH3PgmQG7NarSgB4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Surname = "test",
                            TwoFactorEnabled = false,
                            UserName = "user@test.it"
                        });
                });

            modelBuilder.Entity("E_Share.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("E_Share.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("E_Share.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "4585db44-9cde-45fb-8777-4df85f8ca7b6",
                            RoleId = "3f24398b-2651-449f-a9cb-5e3085746795"
                        },
                        new
                        {
                            UserId = "445f85b8c-71fb-43f8-b025-080888bee57d",
                            RoleId = "19d7d7b6-10f3-455c-8f40-010bf5970143"
                        });
                });

            modelBuilder.Entity("E_Share.Models.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("E_Share.Models.Avalailable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<int>("CityId");

                    b.Property<int>("DayOfWeek");

                    b.Property<TimeSpan>("EndService");

                    b.Property<TimeSpan>("StartService");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("Avalailable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CityId = 1,
                            DayOfWeek = 1,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CityId = 1,
                            DayOfWeek = 2,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CityId = 1,
                            DayOfWeek = 3,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CityId = 1,
                            DayOfWeek = 4,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CityId = 1,
                            DayOfWeek = 5,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CityId = 1,
                            DayOfWeek = 6,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CityId = 1,
                            DayOfWeek = 0,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CityId = 1,
                            DayOfWeek = 1,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CityId = 1,
                            DayOfWeek = 2,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CityId = 1,
                            DayOfWeek = 3,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            CityId = 1,
                            DayOfWeek = 4,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            CityId = 1,
                            DayOfWeek = 5,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            CityId = 1,
                            DayOfWeek = 6,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            CityId = 1,
                            DayOfWeek = 0,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            CityId = 1,
                            DayOfWeek = 1,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            CityId = 1,
                            DayOfWeek = 2,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            CityId = 1,
                            DayOfWeek = 3,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            CityId = 1,
                            DayOfWeek = 4,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 3,
                            CityId = 1,
                            DayOfWeek = 5,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 3,
                            CityId = 1,
                            DayOfWeek = 6,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 3,
                            CityId = 1,
                            DayOfWeek = 0,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 1,
                            CityId = 2,
                            DayOfWeek = 1,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 1,
                            CityId = 2,
                            DayOfWeek = 2,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 1,
                            CityId = 2,
                            DayOfWeek = 3,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 1,
                            CityId = 2,
                            DayOfWeek = 4,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 1,
                            CityId = 2,
                            DayOfWeek = 5,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 1,
                            CityId = 2,
                            DayOfWeek = 6,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 1,
                            CityId = 2,
                            DayOfWeek = 0,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 2,
                            CityId = 2,
                            DayOfWeek = 1,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 2,
                            CityId = 2,
                            DayOfWeek = 2,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 2,
                            CityId = 2,
                            DayOfWeek = 3,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 2,
                            CityId = 2,
                            DayOfWeek = 4,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 2,
                            CityId = 2,
                            DayOfWeek = 5,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 2,
                            CityId = 2,
                            DayOfWeek = 6,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 2,
                            CityId = 2,
                            DayOfWeek = 0,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 3,
                            CityId = 2,
                            DayOfWeek = 1,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 3,
                            CityId = 2,
                            DayOfWeek = 2,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 3,
                            CityId = 2,
                            DayOfWeek = 3,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 3,
                            CityId = 2,
                            DayOfWeek = 4,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 3,
                            CityId = 2,
                            DayOfWeek = 5,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 3,
                            CityId = 2,
                            DayOfWeek = 6,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 3,
                            CityId = 2,
                            DayOfWeek = 0,
                            EndService = new TimeSpan(0, 23, 0, 0, 0),
                            StartService = new TimeSpan(0, 6, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("E_Share.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 0.5,
                            Description = "e-scooter"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 1.0,
                            Description = "e-bike"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 1.5,
                            Description = "e-car"
                        });
                });

            modelBuilder.Entity("E_Share.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cap");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProvinceId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cap = 0,
                            Name = "Novara",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Cap = 0,
                            Name = "Vercelli",
                            ProvinceId = 2
                        });
                });

            modelBuilder.Entity("E_Share.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "NO",
                            Name = "Novara"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "Vercelli",
                            Name = "Vercelli"
                        });
                });

            modelBuilder.Entity("E_Share.Models.RechargeStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Credit");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RechargeStories");
                });

            modelBuilder.Entity("E_Share.Models.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateStart");

                    b.Property<DateTime>("DateStop");

                    b.Property<double>("Price");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("E_Share.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Disponibile"
                        },
                        new
                        {
                            Id = 2,
                            Description = "In uso"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Manutenzione"
                        });
                });

            modelBuilder.Entity("E_Share.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatteryResidue");

                    b.Property<int>("CategoryId");

                    b.Property<int>("CityId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("StatusId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BatteryResidue = 100,
                            CategoryId = 1,
                            CityId = 1,
                            Code = "A1",
                            Latitude = 45.451097699999998,
                            Longitude = 8.6223253,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            BatteryResidue = 100,
                            CategoryId = 2,
                            CityId = 1,
                            Code = "B1",
                            Latitude = 45.452404000000001,
                            Longitude = 8.6213200000000008,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            BatteryResidue = 100,
                            CategoryId = 3,
                            CityId = 1,
                            Code = "C1",
                            Latitude = 45.44811,
                            Longitude = 8.6259420000000002,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            BatteryResidue = 100,
                            CategoryId = 1,
                            CityId = 2,
                            Code = "A2",
                            Latitude = 45.330682000000003,
                            Longitude = 8.4220570000000006,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            BatteryResidue = 100,
                            CategoryId = 2,
                            CityId = 2,
                            Code = "B2",
                            Latitude = 45.330514999999998,
                            Longitude = 8.4233569999999993,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            BatteryResidue = 100,
                            CategoryId = 3,
                            CityId = 2,
                            Code = "C2",
                            Latitude = 45.330052000000002,
                            Longitude = 8.4214020000000005,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("E_Share.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("E_Share.Models.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E_Share.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("E_Share.Models.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E_Share.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("E_Share.Models.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E_Share.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("E_Share.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E_Share.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E_Share.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("E_Share.Models.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E_Share.Models.Avalailable", b =>
                {
                    b.HasOne("E_Share.Models.Category", "Category")
                        .WithMany("Avalailable")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E_Share.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E_Share.Models.City", b =>
                {
                    b.HasOne("E_Share.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E_Share.Models.RechargeStory", b =>
                {
                    b.HasOne("E_Share.Models.ApplicationUser", "User")
                        .WithMany("RechargeStories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E_Share.Models.Ride", b =>
                {
                    b.HasOne("E_Share.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E_Share.Models.Vehicle", "Vehicle")
                        .WithMany("Rides")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E_Share.Models.Vehicle", b =>
                {
                    b.HasOne("E_Share.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E_Share.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E_Share.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
